app SecrecyInPieces {
  wasp: {
    version: "^0.12.3"
  },
  title: "SecrecyInPieces",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
  id Int @id @default(autoincrement())
  email String @unique
  username String
  password String
  registrationDate DateTime @default(now())
  Article Article[]
  Comment Comment[]
psl=}

entity Article {=psl
  id Int @id @default(autoincrement())
  title String
  content String
  author String
  publicationDate DateTime @default(now())
  userId Int
  user User @relation(fields: [userId], references: [id])
  tags Tag[]
  comments Comment[]
psl=}

entity Tag {=psl
  id Int @id @default(autoincrement())
  name String
  articleId Int
  article Article @relation(fields: [articleId], references: [id])
psl=}

entity Comment {=psl
  id Int @id @default(autoincrement())
  text String
  timestamp DateTime @default(now())
  userId Int
  user User @relation(fields: [userId], references: [id])
  articleId Int
  article Article @relation(fields: [articleId], references: [id])
psl=}

action createArticle {
  fn: import { createArticle } from "@src/actions.js",
  entities: [Article, Tag]
}

action editArticle {
  fn: import { editArticle } from "@src/actions.js",
  entities: [Article, Tag]
}

action deleteArticle {
  fn: import { deleteArticle } from "@src/actions.js",
  entities: [Article]
}

action postComment {
  fn: import { postComment } from "@src/actions.js",
  entities: [Comment, Article]
}

query getArticles {
  fn: import { getArticles } from "@src/queries.js",
  entities: [Article, Tag, Comment]
}

query getArticle {
  fn: import { getArticle } from "@src/queries.js",
  entities: [Article, Tag, Comment]
}

query getArticlesByTag {
  fn: import { getArticlesByTag } from "@src/queries.js",
  entities: [Article, Tag]
}

query getComments {
  fn: import { getComments } from "@src/queries.js",
  entities: [Comment, Article]
}

route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import HomePage from "@src/pages/HomePage.jsx",
  authRequired: false
}

route ArticleLibraryRoute { path: "/article-library", to: ArticleLibraryPage }
page ArticleLibraryPage {
  component: import ArticleLibraryPage from "@src/pages/ArticleLibraryPage.jsx",
  authRequired: true
}

route ArticleDetailRoute { path: "/article/:id", to: ArticleDetailPage }
page ArticleDetailPage {
  component: import ArticleDetailPage from "@src/pages/ArticleDetailPage.jsx",
  authRequired: false
}

route AdminPanelRoute { path: "/admin", to: AdminPanelPage }
page AdminPanelPage {
  component: import AdminPanelPage from "@src/pages/AdminPanelPage.jsx",
  authRequired: true
}